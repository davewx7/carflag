{
	id: "car",
	is_human: false,
	is_strict: true,
	zorder: 1,

	properties: {
			_prev_pos: { type: "null|[int,int,decimal]" },
			controller: { type: "obj car_controller" },
			obstacles: { type: "obj obstacles" },

			player: { type: "int" },

			name: "string :: ['Red', 'Blue'][player]",
			color: "[[1,0,0], [0,0,1]][player]",

			flag_grabbed: { type: "null|obj flag" },

			steal_immunity: { default: 0 },

			steal: "def(obj car other) ->commands
			if(cycle > other.steal_immunity+3 and
			   other.flag_grabbed != null,
			[
				set(steal_immunity, cycle),
				set(other.steal_immunity, cycle),
				set(other.flag_grabbed, null),
				set(flag_grabbed, other.flag_grabbed),
				set(other.flag_grabbed.grabbed_by, me),
				other.flag_grabbed.set_owner(me),
			]
			)
			",

			brake_eligible: { type: "int|null" },
			can_brake: "brake_eligible != null and cycle < brake_eligible+60",

			up_pressed: "bool ::
			cycle>180 and
			[level.player.ctrl_up, 'w' in level.player.ctrl_keys][player]",
			left_pressed: "bool ::
			[level.player.ctrl_left, 'a' in level.player.ctrl_keys][player]",
			right_pressed: "bool ::
			[level.player.ctrl_right, 'd' in level.player.ctrl_keys][player]",
			down_pressed: "bool ::
			cycle>180 and
			[level.player.ctrl_down, 's' in level.player.ctrl_keys][player]",

			brake_pressed: "bool :: can_brake and down_pressed",

			grab_pressed: "bool ::
			[(level.player.ctrl_mod_key/2)%2 = 1, ' ' in level.player.ctrl_keys][player]
			",

			_grab_prev: { type: "bool", default: false },

			find_car_collision: "def() -> [{point: Point, other: obj car, side: int, other_side: int}]
			fold(
			[
			filter([if(res != null, {point: res, other: c, side: index(side_a, sides), other_side: index(side_b, other_sides)})
			  where res = geo.line_segment_intersection(side_a[0][0], side_a[0][1], side_a[1][0], side_a[1][1], side_b[0][0], side_b[0][1], side_b[1][0], side_b[1][1])
			        | side_a <- sides, side_b <- other_sides], value != null)
			where other_sides = c.car_sides | c <- controller.cars, c != me],
			a+b, [])
			where sides = car_sides
			where geo = geometry_api()
			",

			find_collisions: "def() -> [{ point: Point, wall: [Point,Point], side: int }]
			fold(
			map(obstacles.walls,
				results
				where results = filter(map(sides, if(res, { point: res, side: index, wall: wall }) where res = geo.line_segment_intersection(value[0][0], value[0][1], value[1][0], value[1][1], wall[0][0], wall[0][1], wall[1][0], wall[1][1])), value != null)
				where wall = value
			),
			a+b, [])
				where geo = geometry_api()
				where sides = car_sides
			",

			car_sides: "
				[[c[0],c[1]], [c[1],c[2]], [c[2],c[3]], [c[3],c[0]]]
				where c = corners
			",

			corners: "[[decimal,decimal]] ::
			[
				[mid_x-c*img_w*0.5+s*img_h*0.5, mid_y-c*img_h*0.5-s*img_w*0.5],
				[mid_x+c*img_w*0.5+s*img_h*0.5, mid_y-c*img_h*0.5+s*img_w*0.5],
				[mid_x-c*img_w*0.5-s*img_h*0.5, mid_y+c*img_h*0.5-s*img_w*0.5],
				[mid_x+c*img_w*0.5-s*img_h*0.5, mid_y+c*img_h*0.5+s*img_w*0.5],
			] where s = sin(rotate)
			  where c = cos(rotate)
			",

            turning_power: "1 + velocity_magnitude*5.0",
            accel: "if(flag_grabbed, 17, 20)",

			velocity_transfer: "decimal :: 0.05",

            friction: "0.02 + velocity_transfer + if(brake_pressed, 0.07, 0.0)",
			velocity_facing_transfer: "decimal :: velocity_transfer*sign(velocity_facing_difference or 1.0)*(90 - abs(velocity_facing_difference))/90.0",
            
            level_width: "int :: level.dimensions[2]",
            level_height: "int :: level.dimensions[3]",

			velocity_rotate: "decimal ::
			if(angle < 0.0, angle + 360.0, angle > 360.0, angle - 360.0, angle)
			  where angle = velocity_angle + 90.0",

			velocity_facing_difference: "decimal ::
			if(diff > 270, 360 - diff,
			   diff > 90, -abs(180 - diff),
			   diff)
				where diff = abs(rotate - velocity_rotate)
			",
	
            render: "def(int ww, int hh) ->commands [
		set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1, frames: 1,
			fbo: c.render(ww, hh, [
                            //body of the car
                            c.set_source_rgba(1,1,1,1),
                            c.rectangle(0,0,ww,hh),
                            c.fill(),
                            
                            //line at the front
                            c.set_source_color(color),
                            c.rectangle(0,0,ww,hh*0.3),
                            c.fill(),
			])
			  where c = canvas(),
		})
            ]",
	},
	
	on_create: "render(12,30)",
	on_process: "
	[
	if(car_collide, [
		if(_prev_pos, [
			set(mid_x, _prev_pos[0]),
			set(mid_y, _prev_pos[1]),
			set(rotate, _prev_pos[2]),
		]),

		if(other_car.flag_grabbed != null and flag_grabbed = null,
			steal(other_car),
		   other_car.flag_grabbed = null and flag_grabbed != null,
		    other_car.steal(me)
		),

		set(car_collide[0].other.velocity_x, velocity_x),
		set(car_collide[0].other.velocity_y, velocity_y),
		set(velocity_x, car_collide[0].other.velocity_x),
		set(velocity_y, car_collide[0].other.velocity_y),
	] where other_car = car_collide[0].other)
	where car_collide = find_car_collision(),
	if(find_collisions(), [
		if(_prev_pos, [
			set(mid_x, _prev_pos[0]),
			set(mid_y, _prev_pos[1]),
			set(rotate, _prev_pos[2]),
		]),
		set(velocity_x, -velocity_x),
		set(velocity_y, -velocity_y),
	], [
		set(_prev_pos, [mid_x,mid_y,rotate]),
	])
	];
	[
 
            //check for steering 
            if(left_pressed, add(rotate,-turning_power)),
            if(right_pressed, add(rotate,turning_power)),
            if(up_pressed, [
                add(velocity_x,accel*sin(rotate)),
                add(velocity_y,-accel*cos(rotate)),
            ]; if(velocity_magnitude > 0.3, set(brake_eligible, cycle));
			   if(velocity_magnitude < 0.1, set(brake_eligible, null))),
            if(down_pressed and not can_brake, [
                add(velocity_x,-accel*sin(rotate)),
                add(velocity_y,accel*cos(rotate)),
            ]),

			if(grab_pressed and not _grab_prev,
				if(flag_grabbed,
				//drop that flag!
				[
					set(flag_grabbed.grabbed_by, null),
					set(flag_grabbed, null),
				],
				if(flag_to_grab,
				//grab that flag!
				[
					set(flag_to_grab.grabbed_by, me),
					set(flag_grabbed, flag_to_grab),
				]) where flag_to_grab = find(controller.flags, value.owner = me and value.in_capture_radius(me))
				)
			),

			set(_grab_prev, grab_pressed),

            if(mid_x < 0, add(mid_x,level_width)),
            if(mid_y < 0, add(mid_y,level_height)),
            if(mid_x > level_width, add(mid_x,-level_width)),
            if(mid_y > level_height, add(mid_y,-level_height)),
            
 
	]; [
		if(rotate > 360, add(rotate, -360.0)),
		if(rotate < 0, add(rotate, 360.0))
	]; [
		add(velocity_x, velocity_facing_transfer*velocity_magnitude*1000.0*sin(rotate)),
		add(velocity_y, -velocity_facing_transfer*velocity_magnitude*1000.0*cos(rotate)),
       add(velocity_x, -max(1.0/friction, abs(velocity_x))*sign(velocity_x) * friction),
       add(velocity_y, -max(1.0/friction, abs(velocity_y))*sign(velocity_y) * friction),
	]",
	
	on_type_updated: "[
            fire_event('create')
        ]",

}
