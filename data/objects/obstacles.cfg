{
    id: "obstacles",
    	zorder: 0,

    
    properties: {
        level_width: "int :: level.dimensions[2]",
        level_height: "int :: level.dimensions[3]",
        shapes: {
            type: "[[Point]]",
            default: [
            [
                [120,100],
                [225,200],
                [190,210],
                [90,120],
            ],
            [
                [680,100],
                [575,200],
                [610,210],
                [710,120],
            ],
            [
                [380,400],
                [420,400],
                [410,500],
                [390,500],
            ],
            ]
        },

		walls: { type: "[[Point,Point]]", default: [] },

        render: "def(int ww, int hh) ->commands [
            set(animation, {
                id: 'fbo',
                image: 'fbo',
                x: 0, y: 0, w: ww, h: hh,
                scale: 1, frames: 1,
                fbo: c.render(ww, hh, [
                    //body of the car
                            
                    c.set_source_rgba(1,1,1,1),

                    map(shapes, [
                        c.move_to(value[0][0], value[0][1]),
                        map(value[1:], c.line_to(value[0], value[1])),
                        c.fill(),
                    ]),
                    
\                ])
                where c = canvas(),
            })
        ]",
    },

    on_create: "[
        render(level_width,level_height),
		set(walls,
		fold(
		map(shapes,
			map(shape,
				[shape[index],shape[(index+1)%size(shape)]]
			)
			where shape = value
		),
		a+b, [])),
        set(x,0),set(y,0)
    ]",

    on_type_updated: "schedule(2, fire_event('recreate'))",
    on_recreate: "[
    set(shapes, new_obj.shapes),
    fire_event('create'),
    ]
    where new_obj = object('obstacles',{x: x, y: y})",
    
}
