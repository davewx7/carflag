{
	id: "flag",
	is_strict: true,

	properties: {
		_width: 16,
		_height: 26,

		grabbed_by: { type: "null|obj car" },

		owner: { type: "null|obj car" },

		set_owner: "def(obj car car) ->commands [
			set(owner, car); render(_width, _height)
		]",

	    render: "def(int ww, int hh) ->commands [
			set(animation, {
			id: 'fbo',
			image: 'fbo',
			x: 0, y: 0, w: ww, h: hh,
			scale: 1, frames: 1,
			fbo: c.render(ww, hh, [

				//flag pole
                c.set_source_rgba(1,1,1,1),
                c.rectangle(0,0,3,hh),
                c.fill(),

				//triangle for flag
                c.set_source_color(if(owner, owner.color, [0.5,0.5,0.5])),
				c.move_to(3, 0),
				c.line_to(ww, hh*0.2),
				c.line_to(3, hh*0.4),
				c.fill(),

			])
			  where c = canvas(),
		})
		]
		",

		capture_radius: 26,

		in_capture_radius: "def(obj car car) ->bool
		    abs(car.mid_x - mid_x) < capture_radius and
		    abs(car.mid_y - mid_y) < capture_radius
		",
	},

	on_process: "[
		if(grabbed_by != null, [
			set(mid_x, grabbed_by.mid_x),
			set(mid_y, grabbed_by.mid_y),
		]),
		[if(car != owner and in_capture_radius(car) and (owner = null or not in_capture_radius(owner)),
			set_owner(car)
		) | car <- level.chars, car is obj car]
	]",

	on_create: "render(_width, _height)",
	on_type_updated: "fire_event('create')",
}
